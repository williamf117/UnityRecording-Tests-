
in order to record there every object you want to include in  the recording must have the replay object and replay transform 
scripts added to them. 
if you want to record audio from the mic you need to add the mic recorder script it is attached to the replay prefeb allong with 
the replay controler. there  is an audio sorce on this prefab that is where the mic audio will play from in the replay. 

the mic recorder limits recording length to 5 min because length had to be set at the start of the recording. 

the replay controler is what binds the audio and replay together it handles creating and playing recordings. 
the recording dictionary class handdles reading and writing to a csv to save the recording names and holds a dictonary contaioning 
names and paths to the files 

I added a game manager to handle passing info between scenes and changing the file path that the replay manager and sawav scripts 
are loading and saving to. 

Replay Controler: 
	Fields:
		AudioSource: the audio source that the mic recording should play though
	Methods: 
		createRecording(String name): this sets the recording file tartet to be name and calls the mic to start recording passing name
		then adds this new recording to the dictionary. 
		
		SelectandStartReplay(string name): when passed a name this will load the corisponding replay and start the replay

CamraControler:
	Fields:
		Replay, recordingcam: replay is the camrea that is active during a replay and recording cam is active while recording or idle 

	methods:
		update: this is checking to see if the recording state has changed and if it has it activates the appropreat camera. 

Recording Dictionaryclass
	Fields:
		RecordingDictionary: this is the dictionary that holds the names and file names of the recordings 
		bool init: a bool to check to see if the class has been initalised
	Methods: 
		Init(): initalises the recording dictionary and loads the dictionary from the csv 
		AddRecording(string name, string recordfile, string audio file): adds the new recording to the dictionary 
		SaveDictionarty(): saves the dictionary to the csv.
		Load(): loades the dictionary from the csv 

GameManger:
	Fields: 
		public static GameManager Instence: static instence to make it easy to call game manager methods 
		int wait: the amount of time to give a scene before trying to starte playing a Recording 
	Methods:
		Awake:
			allows for the creation of a static instence that can be called from any where
		start:
			sets the game manager to not be destroyed on load and initalizes the dictionary 
		newRecording(string name) : 
			loads the main scene and runs the coroutine newRecording()
		PlayRecording(string name ): 
			loads the main scene and runs the coroutine play()
		SetTargetFilePath(string FilePath):
			sets the file path for both savwav and the replay manager.
	IEnumerators:
		newRecording(string key):
			waits for the scene to load and then uses the replay controler to create a new recording with createRecording()
		Play(string key):
			waits for the scene to load and then uses the replay controler to play a recording with SelectandStartReplay()


MenueControler: this is a class just for the test scene menue will likly need to roll our own controles in each implementation. 
